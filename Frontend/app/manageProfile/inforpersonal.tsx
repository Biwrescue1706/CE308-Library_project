import React, { useEffect, useState } from "react";
import {
  View, Text, TextInput, TouchableOpacity, StyleSheet, ActivityIndicator,
  Alert, ScrollView, Platform, Modal,
} from "react-native";
import axios from "axios";
import Constants from "expo-constants";
import DateTimePicker from "@react-native-community/datetimepicker";
import { useRouter } from "expo-router";

const API_URL = Constants.expoConfig?.extra?.API_URL;

const titleTH = [
  "‡∏ô‡∏≤‡∏¢", "‡∏ô‡∏≤‡∏á", "‡∏ô‡∏≤‡∏á‡∏™‡∏≤‡∏ß", "‡∏î.‡∏ä.", "‡∏î.‡∏ç.",
  "‡∏î‡∏£.", "‡∏ú‡∏®.", "‡∏£‡∏®.", "‡∏®.", "‡∏®‡∏≤‡∏™‡∏ï‡∏£‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏Ñ‡∏∏‡∏ì",
  "‡∏ú‡∏®.‡∏î‡∏£.", "‡∏£‡∏®.‡∏î‡∏£.", "‡∏®.‡∏î‡∏£.", "‡∏®‡∏≤‡∏™‡∏ï‡∏£‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÄ‡∏Å‡∏µ‡∏¢‡∏£‡∏ï‡∏¥‡∏Ñ‡∏∏‡∏ì ‡∏î‡∏£.",
  "‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà ‡∏£.‡∏ï.", "‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà ‡∏£.‡∏ï.‡∏î‡∏£.", "‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà ‡∏£.‡∏ï. ‡∏´‡∏ç‡∏¥‡∏á", "‡∏ß‡πà‡∏≤‡∏ó‡∏µ‡πà ‡∏£.‡∏ï.‡∏î‡∏£.‡∏´‡∏ç‡∏¥‡∏á",
];

const titleEN = [
  "Mr.", "Mrs.", "Miss", "Master", "Miss (Child)",
  "Dr.", "Asst. Prof.", "Assoc. Prof.", "Prof.", "Professor Emeritus",
  "Asst. Prof. Dr.", "Assoc. Prof. Dr.", "Prof. Dr.", "Professor Emeritus Dr.",
  "Acting Sub Lt.", "Acting Sub Lt. Dr.", "Acting Sub Lt. (Female)", "Acting Sub Lt. Dr. (Female)",
];

export default function Inforpersonal() {
  const [user, setUser] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [showDatePicker, setShowDatePicker] = useState(false);
  const [showTitleTHModal, setShowTitleTHModal] = useState(false);
  const [showTitleENModal, setShowTitleENModal] = useState(false);

  const router = useRouter();

  useEffect(() => {
    axios
      .get(`${API_URL}/users/me`, { withCredentials: true })
      .then((res) => {
        setUser(res.data.user);
        setLoading(false);
      })
      .catch((err) => {
        console.error("‚ùå Error fetching user data:", err);
        setLoading(false);
      });
  }, []);

  const updateUser = (field: string, value: string) => {
    if (!user) return;
    setUser({ ...user, [field]: value });
  };

  const handleSelectTitleTH = (selectedTitleTH: string) => {
    const index = titleTH.indexOf(selectedTitleTH);
    updateUser("titleTH", selectedTitleTH);
    setShowTitleTHModal(false);
  };

  const handleSelectTitleEN = (selectedTitleEN: string) => {
    const index = titleEN.indexOf(selectedTitleEN);
    updateUser("titleEN", selectedTitleEN);
    setShowTitleTHModal(false);
  };


  const formatThaiDate = (dateString: string) => {
    const date = new Date(dateString);
    const thaiMonths = [
      "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
      "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    ];
    const day = date.getDate().toString().padStart(2, "0");
    const month = thaiMonths[date.getMonth()];
    const year = date.getFullYear() + 543;
    return `${day} ${month} ${year}`;
  };

  const handleSave = () => {
    if (!user?.username) return Alert.alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");

    setSaving(true);
    axios
      .put(`${API_URL}/users/update/${user.username}`, user, { withCredentials: true })
      .then(() => {
        Alert.alert("‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏•‡πâ‡∏ß");
        router.replace("/");
      })
      .catch((err) => {
        console.error("‚ùå Error saving user data:", err);
        Alert.alert("‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
      })
      .finally(() => setSaving(false));
  };

  if (loading) {
    return (
      <View style={styles.container}>
        <ActivityIndicator size="large" color="tomato" />
      </View>
    );
  }

  return (
    <ScrollView contentContainerStyle={styles.container}>
      <View style={styles.formBox}>
        <Text style={styles.header}>üìã ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß</Text>

        <Text style={styles.label}>‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢) : </Text>
        <TouchableOpacity
          style={styles.input}
          onPress={() =>
            setShowTitleTHModal(true)}>
          <Text>{user?.titleTH || "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡πÑ‡∏ó‡∏¢)"}</Text>
        </TouchableOpacity>

        <Text style={styles.label}>‡∏ä‡∏∑‡πà‡∏≠ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢) : </Text>
        <TextInput style={styles.input}
          value={user?.firstNameTH}
          onChangeText={(text) =>
            updateUser("firstNameTH", text)}
        />

        <Text style={styles.label}>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢) : </Text>
        <TextInput style={styles.input}
          value={user?.lastNameTH}
          onChangeText={(text) =>
            updateUser("lastNameTH", text)}
        />
        <Text style={styles.label}>‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©) : </Text>
        <TouchableOpacity
          style={styles.input}
          onPress={() => setShowTitleENModal(true)}
        >
          <Text>{user?.titleEN || "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)"}</Text>
        </TouchableOpacity>


        <Text style={styles.label}>‡∏ä‡∏∑‡πà‡∏≠ (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©) : </Text>
        <TextInput style={styles.input}
          value={user?.firstNameEN}
          onChangeText={(text) =>
            updateUser("firstNameEN", text)} />

        <Text style={styles.label}>‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏• (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©) : </Text>
        <TextInput style={styles.input}
          value={user?.lastNameEN}
          onChangeText={(text) =>
            updateUser("lastNameEN", text)} />

        <Text style={styles.label}>‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£ : </Text>
        <TextInput style={styles.input}
          value={user?.phone}
          onChangeText={(text) =>
            updateUser("phone", text)}
          keyboardType="phone-pad" />

        <Text style={styles.label}>‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î : </Text>
        <TouchableOpacity
          style={styles.input}
          onPress={() =>
            setShowDatePicker(true)}>
          <Text>{formatThaiDate(user?.birthDate)}</Text>
        </TouchableOpacity>

        {showDatePicker && (
          <DateTimePicker
            value={new Date(user?.birthDate)}
            mode="date"
            display={Platform.OS === "ios" ? "spinner" : "default"}
            onChange={(_, selectedDate) => {
              setShowDatePicker(false);
              if (selectedDate) {
                updateUser("birthDate", selectedDate.toISOString());
              }
            }}
          />
        )}

        <Text style={styles.label}>‡∏ö‡πâ‡∏≤‡∏ô‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà : </Text>
        <TextInput style={styles.input} value={user?.houseNumber} onChangeText={(text) => updateUser("houseNumber", text)} />

        <Text style={styles.label}>‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà : </Text>
        <TextInput style={styles.input}
          value={user?.villageNo}
          onChangeText={(text) =>
            updateUser("villageNo", text)} />

        <Text style={styles.label}>‡∏ã‡∏≠‡∏¢ : </Text>
        <TextInput style={styles.input}
          value={user?.alley}
          onChangeText={(text) =>
            updateUser("alley", text)} />

        <Text style={styles.label}>‡∏ñ‡∏ô‡∏ô : </Text>
        <TextInput style={styles.input}
          value={user?.street}
          onChangeText={(text) =>
            updateUser("street", text)} />

        <Text style={styles.label}>‡∏ï‡∏≥‡∏ö‡∏•/‡πÅ‡∏Ç‡∏ß‡∏á : </Text>
        <TextInput style={styles.input}
          value={user?.subdistrict}
          onChangeText={(text) =>
            updateUser("subdistrict", text)} />

        <Text style={styles.label}>‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡πÄ‡∏Ç‡∏ï : </Text>
        <TextInput style={styles.input}
          value={user?.district}
          onChangeText={(text) =>
            updateUser("district", text)} />

        <Text style={styles.label}>‡∏à‡∏±‡∏á‡∏´‡∏ß‡∏±‡∏î : </Text>
        <TextInput style={styles.input}
          value={user?.province}
          onChangeText={(text) =>
            updateUser("province", text)} />

        <Text style={styles.label}>‡∏£‡∏´‡∏±‡∏™‡πÑ‡∏õ‡∏£‡∏©‡∏ì‡∏µ‡∏¢‡πå : </Text>
        <TextInput style={styles.input}
          value={user?.postalCode}
          onChangeText={(text) =>
            updateUser("postalCode", text)} keyboardType="numeric" />

        <TouchableOpacity style={styles.button} onPress={handleSave} disabled={saving}>
          <Text style={styles.buttonText}>
            {saving ? "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å..." : "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"}
          </Text>
        </TouchableOpacity>
      </View>

      <Modal visible={showTitleTHModal} animationType="slide">
        <ScrollView contentContainerStyle={styles.modalContainer}>
          <Text style={styles.modalTitle}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)</Text>
          {titleTH.map((title) => (
            <TouchableOpacity
              key={title}
              style={styles.modalItem}
              onPress={() => handleSelectTitleTH(title)}
            >
              <Text>{title}</Text>
            </TouchableOpacity>
          ))}
          <TouchableOpacity onPress={() => setShowTitleTHModal(false)}>
            <Text style={styles.modalClose}>‡∏õ‡∏¥‡∏î</Text>
          </TouchableOpacity>
        </ScrollView>
      </Modal>

      <Modal visible={showTitleENModal} animationType="slide">
        <ScrollView contentContainerStyle={styles.modalContainer}>
          <Text style={styles.modalTitle}>‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤ (‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©)</Text>
          {titleEN.map((title) => ( // ‚úÖ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô titleEN
            <TouchableOpacity
              key={title}
              style={styles.modalItem}
              onPress={() => handleSelectTitleEN(title)}
            >
              <Text>{title}</Text>
            </TouchableOpacity>
          ))}
          <TouchableOpacity onPress={() => setShowTitleENModal(false)}> {/* ‚úÖ ‡∏õ‡∏¥‡∏î EN ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å */}
            <Text style={styles.modalClose}>‡∏õ‡∏¥‡∏î</Text>
          </TouchableOpacity>
        </ScrollView>
      </Modal>
    </ScrollView>
  );
}

const styles = StyleSheet.create({
  container: {
    padding: 20,
    backgroundColor: "#00FA9A",
  },
  header: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 20,
    textAlign: "center",
  },
  label: {
    fontSize: 16,
    marginTop: 10,
  },
  input: {
    borderWidth: 1,
    borderColor: "#000000",
    borderRadius: 8,
    padding: 10,
    fontSize: 16,
    marginTop: 5,
    backgroundColor: "#fff",
  },
  formBox: {
    backgroundColor: "#ffffff",
    borderRadius: 16,
    padding: 20,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 6,
    elevation: 4,
  },
  button: {
    backgroundColor: "#28a745",
    paddingVertical: 15,
    marginTop: 30,
    borderRadius: 10,
    alignItems: "center",
  },
  buttonText: {
    color: "#fff",
    fontSize: 18,
    fontWeight: "bold",
  },
  modalContainer: {
    padding: 20,
    backgroundColor: "#ffffff",
  },
  modalTitle: {
    fontSize: 18,
    fontWeight: "bold",
    marginBottom: 10,
    textAlign: "center",
  },
  modalItem: {
    padding: 10,
    borderBottomWidth: 1,
    borderBottomColor: "#ccc",
    backgroundColor: "#ffffff",
  },
  modalClose: {
    color: "red",
    textAlign: "center",
    marginTop: 20,
    fontSize: 16,
  },
});
