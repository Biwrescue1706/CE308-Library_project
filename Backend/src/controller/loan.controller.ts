import { Request, Response } from "express";
import { prisma } from "../utils/prisma";
import * as LoanService from "../service/loan.service";
import { differenceInDays, addDays, format } from "date-fns";
import { th } from "date-fns/locale";
import axios from "axios";
import { promises } from "dns";

// LINE Messaging API
const LINE_API_URL = "https://api.line.me/v2/bot/message/push";
const LINE_GROUP_ID = "C5ea2bec79706873f7212a1dccd5c6702";
const LINE_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN || "WBtqkdSyTJvF/CUH3UWiseH+Q61cmSJ8bQctxurcN4jDWZaeCii0Pfh27BM88S5wJ6GMyCocVk1/ns70lnsTLLTLy1jLiFjLATYgetkNgW6ZShb1/3Yint3caetYvC8BjUxEqoGyPs/4mH6ZIlMs7wdB04t89/1O/w1cDnyilFU=";

const sendLineMessage = async (message: string) => {
  try {
    await axios.post(
      LINE_API_URL,
      {
        to: LINE_GROUP_ID,
        messages: [{ type: "text", text: message }],
      },
      {
        headers: {
          Authorization: `Bearer ${LINE_TOKEN}`,
          "Content-Type": "application/json",
        },
      }
    );
  } catch (error: any) {
    console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á LINE ‡πÑ‡∏î‡πâ:", error.response?.data || error.message);
  }
};

const formatThaiDate = (date: Date) => {
  return format(date, "d MMMM yyyy", { locale: th }).replace(/[0-9]{4}$/, (year) => `${parseInt(year) + 543}`);
};

// ‚úÖ ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÄ‡∏•‡πà‡∏°‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
export const borrowBook = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (req as any).user;
    const { bookId, borrowedQuantity } = req.body;

    if (!user || !bookId || !borrowedQuantity || borrowedQuantity <= 0) {
      res.status(400).json({ message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" }); return
    }

    const book = await prisma.book.findUnique({ where: { id: bookId } });
    if (!book) {
      res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" });
      return
    }
    if (book.availableCopies < borrowedQuantity) {
      res.status(400).json({ message: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠" });
      return
    }

    const now = new Date();
    const dueDate = addDays(now, 7);

    const loan = await prisma.loan.create({
      data: {
        userId: user.id,
        bookId,
        borrowedQuantity,
        loanDate: now,
        dueDate,
        returned: false,
      },
    });

    await prisma.book.update({
      where: { id: bookId },
      data: { availableCopies: { decrement: borrowedQuantity } },
    });

    await sendLineMessage(
      `üìö ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠\n` +
      `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user.username}\n` +
      `‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: ${book.title}\n` +
      `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${borrowedQuantity} ‡πÄ‡∏•‡πà‡∏°\n` +
      `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°: ${formatThaiDate(now)}\n` +
      `‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô: ${formatThaiDate(dueDate)}`
    );

    res.status(201).json({ message: "‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", loan });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" });
  }
};

// ‚úÖ ‡∏¢‡∏∑‡∏°‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏•‡πà‡∏°
export const borrowMultiple = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (req as any).user;
    const rawItems = req.body.item;

    if (!user || !Array.isArray(rawItems) || rawItems.length === 0) {
      res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" });
      return
    }

    const items = rawItems.map((item: any) => ({
      bookId: item.bookId,
      quantity: item.borrowedQuantity,
    }));

    const bookIds = rawItems.map((item: any) => item.bookId);
    const books = await prisma.book.findMany({
      where: { id: { in: bookIds } },
      select: { id: true, title: true },
    });

    const loans = await LoanService.borrowMultipleBooks(user.id, items);

    const now = new Date();
    const dueDate = addDays(now, 7);
    const bookLines = rawItems
      .map((item: any) => {
        const matched = books.find((b) => b.id === item.bookId);
        return `- ${matched?.title || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"} (${item.borrowedQuantity} ‡πÄ‡∏•‡πà‡∏°)`;
      })
      .join("\n");

    await sendLineMessage(
      `üìö ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n` +
      `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user.username}\n` +
      `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°: ${formatThaiDate(now)}\n` +
      `‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô: ${formatThaiDate(dueDate)}\n` +
      `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n${bookLines}`
    );

    res.status(201).json({ message: "‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", loans });
  } catch (error: any) {
    console.error("‚ùå borrowMultiple error:", error.message);
    res.status(500).json({ message: error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });
  }
};

// ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠ (‡∏ö‡∏≤‡∏á‡πÄ‡∏•‡πà‡∏°)
export const returnBook = async (req: Request, res: Response): Promise<void> => {
  const { id } = req.params;
  const { quantity } = req.body;

  try {
    const loan = await prisma.loan.findUnique({
      where: { id },
      include: { user: true, book: true },
    });

    if (!loan || loan.returned) {
      res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß" });
      return;
    }

    const remaining = loan.borrowedQuantity - loan.returnedQuantity;
    const returnQty = Math.min(quantity || remaining, remaining);
    const updatedReturned = loan.returnedQuantity + returnQty;
    const isFullyReturned = updatedReturned >= loan.borrowedQuantity;
    const now = new Date();
    const lateDays = isFullyReturned && loan.dueDate
      ? Math.max(differenceInDays(now, loan.dueDate), 0)
      : loan.lateDays ?? 0;

    const updatedLoan = await prisma.loan.update({
      where: { id },
      data: {
        returnedQuantity: updatedReturned,
        ...(isFullyReturned && {
          returned: true,
          returnDate: now,
          lateDays,
        }),
      },
    });

    await prisma.book.update({
      where: { id: loan.bookId },
      data: { availableCopies: { increment: returnQty } },
    });

    if (isFullyReturned) {
      await sendLineMessage(
        `‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠\n` +
        `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${loan.user.username}\n` +
        `‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: ${loan.book.title}\n` +
        `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${loan.borrowedQuantity} ‡πÄ‡∏•‡πà‡∏°\n` +
        `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°: ${formatThaiDate(loan.loanDate)}\n` +
        `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô: ${formatThaiDate(now)}\n` +
        `${lateDays > 0 ? `‚è∞ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î ${lateDays} ‡∏ß‡∏±‡∏ô` : "üü¢ ‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤"}`
      );
    }

    res.json({ message: "‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", loan: updatedLoan });
  } catch (err) {
    console.error("‚ùå Error returnBook:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" });
  }
};

// ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const returnAllBooks = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (req as any).user;
    const { returnData } = req.body; // [{ loanId, quantity }]

    if (!Array.isArray(returnData) || returnData.length === 0) {
      res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô" });
      return;
    }

    const now = new Date();
    const returnedBooks = await Promise.all(
      returnData.map(async ({ loanId, quantity }) => {
        const loan = await prisma.loan.findUnique({
          where: { id: loanId },
          include: { book: true },
        });

        if (!loan || loan.returned || loan.userId !== user.id) return null;

        const remaining = loan.borrowedQuantity - loan.returnedQuantity;
        const returnQty = Math.min(quantity, remaining);
        const updatedReturned = loan.returnedQuantity + returnQty;
        const isFullyReturned = updatedReturned >= loan.borrowedQuantity;
        const lateDays = isFullyReturned && loan.dueDate
          ? Math.max(differenceInDays(now, loan.dueDate), 0)
          : loan.lateDays ?? 0;

        await prisma.loan.update({
          where: { id: loanId },
          data: {
            returnedQuantity: updatedReturned,
            ...(isFullyReturned && {
              returned: true,
              returnDate: now,
              lateDays,
            }),
          },
        });

        await prisma.book.update({
          where: { id: loan.bookId },
          data: { availableCopies: { increment: returnQty } },
        });

        return {
          title: loan.book.title,
          quantity: returnQty,
          lateDays: isFullyReturned ? lateDays : 0,
        };
      })
    );

    const filtered = returnedBooks.filter(Boolean);
    const bookListText = filtered.map(item =>
      `- ${item!.title} (${item!.quantity} ‡πÄ‡∏•‡πà‡∏°)${item!.lateDays > 0 ? ` ‚è∞ ‡πÄ‡∏Å‡∏¥‡∏ô ${item!.lateDays} ‡∏ß‡∏±‡∏ô` : ""}`
    ).join("\n");

    await sendLineMessage(
      `‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î\n` +
      `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user.username}\n` +
      `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô: ${formatThaiDate(now)}\n` +
      `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô:\n${bookListText}`
    );

    res.json({ message: "‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", returnedBooks: filtered });
  } catch (err) {
    console.error("‚ùå returnAllBooks error:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î" });
  }
};

// ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á// ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
export const getLoansByUser = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (req as any).user;
    const loans = await prisma.loan.findMany({
      where: { userId: user.id },
      include: { book: { select: { title: true } } },
      orderBy: { loanDate: "desc" },
    });

    res.json(loans.map((loan) => ({
      id: loan.id,
      title: loan.book.title,
      borrowedQuantity: loan.borrowedQuantity,
      returnedQuantity: loan.returnedQuantity,
      loanDate: formatThaiDate(loan.loanDate),
      dueDate: loan.dueDate ? formatThaiDate(loan.dueDate) : null,
      returnDate: loan.returnDate ? formatThaiDate(loan.returnDate) : null,
      returned: loan.returned,
      lateDays: loan.lateDays ?? 0,
    })));
  } catch (err) {
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
  }
};

// ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (admin)
export const getAllLoans = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (req as any).user;
    if (user.role !== "admin") {
      res.status(403).json({ message: "‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" });
      return
    }

    const loans = await prisma.loan.findMany({
      include: {
        user: {
          select: {
            memberId: true,
            username: true,
            titleTH: true,
            firstNameTH: true,
            lastNameTH: true,
            phone: true,
          },
        },
        book: {
          select:
          {
            title: true
          }
        },
      },
      orderBy: [
        { loanDate: "desc" },
        { returnDate: "desc" }
      ]
    });

    res.json(loans.map((loan) => ({
      id: loan.id,
      title: loan.book.title,
      username: loan.user.username,
      memberId: loan.user.memberId,
      fullNameTH: `${loan.user.titleTH}${loan.user.firstNameTH} ${loan.user.lastNameTH}`,
      phone: loan.user.phone,
      borrowedQuantity: loan.borrowedQuantity,
      returnedQuantity: loan.returnedQuantity,
      loanDate: formatThaiDate(loan.loanDate),
      dueDate: loan.dueDate ? formatThaiDate(loan.dueDate) : null,
      returnDate: loan.returnDate ? formatThaiDate(loan.returnDate) : null,
      returned: loan.returned,
      lateDays: loan.lateDays ?? 0,
    })));
  } catch (err) {
    console.error("‚ùå getAllLoans error:", err);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
  }
};

// ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô (admin)
export const getActiveLoans = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (req as any).user;
    if (user.role !== "admin") {
      res.status(403).json({ message: "‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" });
      return
    }

    const loans = await prisma.loan.findMany({
      where: { returned: false },
      include: {
        user: {
          select: {
            memberId: true,
            username: true,
            titleTH: true,
            firstNameTH: true,
            lastNameTH: true,
            phone: true,
          },
        },
        book: {
          select:
          {
            title: true
          }
        },
      },
      orderBy: [
        { loanDate: "desc" },
        { returnDate: "desc" }
      ]
    });

    res.json(loans.map((loan) => ({
      id: loan.id,
      title: loan.book.title,
      username: loan.user.username,
      memberId: loan.user.memberId,
      fullNameTH: `${loan.user.titleTH}${loan.user.firstNameTH} ${loan.user.lastNameTH}`,
      phone: loan.user.phone,
      borrowedQuantity: loan.borrowedQuantity,
      returnedQuantity: loan.returnedQuantity,
      loanDate: formatThaiDate(loan.loanDate),
      dueDate: loan.dueDate ? formatThaiDate(loan.dueDate) : null,
    })));
  } catch (err) {
    console.error("‚ùå getActiveLoans error:", err);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
  }
};

// ‚úÖ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô (admin)
export const getOverdueLoans = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (req as any).user;
    if (user.role !== "admin") {
      res.status(403).json({ message: "‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô" });
      return
    }


    const today = new Date();

    const loans = await prisma.loan.findMany({
      where: {
        returned: false,
        dueDate: { lt: today },
      },
      include: {
        user: {
          select: {
            memberId: true,
            username: true,
            titleTH: true,
            firstNameTH: true,
            lastNameTH: true,
            phone: true,
          },
        },
        book: { select: { title: true } },
      },
      orderBy: [
        { loanDate: "desc" },
        { returnDate: "desc" }
      ]
    });

    res.json(loans.map((loan) => ({
      id: loan.id,
      title: loan.book.title,
      username: loan.user.username,
      memberId: loan.user.memberId,
      fullNameTH: `${loan.user.titleTH}${loan.user.firstNameTH} ${loan.user.lastNameTH}`,
      phone: loan.user.phone,
      borrowedQuantity: loan.borrowedQuantity,
      returnedQuantity: loan.returnedQuantity,
      loanDate: formatThaiDate(loan.loanDate),
      dueDate: loan.dueDate ? formatThaiDate(loan.dueDate) : null,
      lateDays: differenceInDays(today, loan.dueDate!),
    })));
  } catch (err) {
    console.error("‚ùå getOverdueLoans error:", err);
    res.status(500).json({ message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ" });
  }
};
