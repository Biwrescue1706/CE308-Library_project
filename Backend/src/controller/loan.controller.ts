import { Request, Response } from "express";
import { prisma } from "../utils/prisma";
import * as LoanService from "../service/loan.service";
import { differenceInDays, addDays } from "date-fns";
import axios from "axios";

// üü¢ LINE Messaging API
const LINE_API_URL = "https://api.line.me/v2/bot/message/push";
const LINE_GROUP_ID = "C5ea2bec79706873f7212a1dccd5c6702"; // üîÅ ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà‡∏î‡πâ‡∏ß‡∏¢ groupId ‡∏à‡∏£‡∏¥‡∏á
const LINE_TOKEN = process.env.LINE_CHANNEL_ACCESS_TOKEN ||
  "WBtqkdSyTJvF/CUH3UWiseH+Q61cmSJ8bQctxurcN4jDWZaeCii0Pfh27BM88S5wJ6GMyCocVk1/ns70lnsTLLTLy1jLiFjLATYgetkNgW6ZShb1/3Yint3caetYvC8BjUxEqoGyPs/4mH6ZIlMs7wdB04t89/1O/w1cDnyilFU=";

const sendLineMessage = async (message: string) => {
  try {
    await axios.post(
      LINE_API_URL,
      {
        to: LINE_GROUP_ID,
        messages: [{ type: "text", text: message }],
      },
      {
        headers: {
          Authorization: `Bearer ${LINE_TOKEN}`,
          "Content-Type": "application/json",
        },
      }
    );
  } catch (error: unknown) {
    if (axios.isAxiosError(error)) {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á LINE ‡πÑ‡∏î‡πâ:", error.response?.data || error.message);
    } else {
      console.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á LINE ‡πÑ‡∏î‡πâ:", error);
    }
  }
};

// ‚úÖ ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
export const borrowBook = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (req as any).user;
    const { bookId, quantity } = req.body;

    if (!user) {
      res.status(401).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
      return
    }
    if (!bookId || !quantity || quantity <= 0) {
      res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏´‡∏±‡∏™‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÅ‡∏•‡∏∞‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
      return
    }

    const book = await prisma.book.findUnique({ where: { id: bookId } });
    if (!book) {
      res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" });
      return
    }

    if (book.availableCopies < quantity) {
      res.status(400).json({ message: "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°" });
      return
    }

    const now = new Date();
    const dueDate = addDays(now, 7);

    const loan = await prisma.loan.create({
      data: {
        userId: user.id,
        bookId,
        loanDate: now,
        dueDate,
        returned: false,
        quantity,
      },
    });

    await prisma.book.update({
      where: { id: bookId },
      data: {
        availableCopies: { decrement: quantity },
      },
    });

    // üü¢ ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE group
    await sendLineMessage(
      `üìö ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠\n` +
      `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user.username}\n` +
      `‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: ${book.title}\n` +
      `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${quantity} ‡πÄ‡∏•‡πà‡∏°\n` +
      `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°: ${now.toLocaleDateString("th-TH")}\n` +
      `‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô: ${dueDate.toLocaleDateString("th-TH")}`
    );

    res.status(201).json({ message: "‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", loan });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" });
  }
};

// üì¶ ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏•‡πà‡∏°‡πÉ‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
export const borrowMultiple = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (req as any).user;
    const items: { bookId: string; quantity: number }[] = req.body.items;

    if (!user) {
      res.status(401).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
      return;
    }

    if (!Array.isArray(items) || items.length === 0) {
      res.status(400).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°" });
      return;
    }

    // ‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°
    const bookIds = items.map((item) => item.bookId);
    const books = await prisma.book.findMany({
      where: { id: { in: bookIds } },
      select: { id: true, title: true },
    });

    // ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    const loans = await LoanService.borrowMultipleBooks(user.id, items);

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö LINE
    const now = new Date();
    const dueDate = addDays(now, 7);
    const bookLines = items.map((item) => {
      const matchedBook = books.find((b) => b.id === item.bookId);
      return `- ${matchedBook?.title || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"} (${item.quantity} ‡πÄ‡∏•‡πà‡∏°)`;
    }).join("\n");

    await sendLineMessage(
      `üìö ‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£\n` +
      `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user.username}\n` +
      `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°: ${now.toLocaleDateString("th-TH")}\n` +
      `‡∏Ñ‡∏£‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô: ${dueDate.toLocaleDateString("th-TH")}\n` +
      `‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:\n${bookLines}`
    );

    res.status(201).json({ message: "‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", loans });
  } catch (error: any) {
    console.error("‚ùå borrowMultiple error:", error.message);
    res.status(500).json({ message: error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£" });
  }
};


// ‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠
export const returnBook = async (req: Request, res: Response): Promise<void> => {
  try {
    const { id } = req.params;

    const loan = await prisma.loan.findUnique({
      where: { id },
      include: {
        user: true,
        book: true,
      },
    });

    if (!loan || loan.returned) {
      res.status(400).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏° ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏∑‡∏ô‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
      return
    }

    const returnDate = new Date();
    let lateDays = 0;
    if (loan.dueDate) {
      lateDays = Math.max(differenceInDays(returnDate, loan.dueDate), 0);
    }

    const updatedLoan = await prisma.loan.update({
      where: { id },
      data: {
        returned: true,
        returnDate,
        lateDays,
      },
    });

    await prisma.book.update({
      where: { id: loan.bookId },
      data: {
        availableCopies: { increment: loan.quantity },
      },
    });

    // üü¢ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏Ñ‡∏∑‡∏ô
    await sendLineMessage(
      `‚úÖ ‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠\n` +
      `‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${loan.user.username}\n` +
      `‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠: ${loan.book.title}\n` +
      `‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${loan.quantity} ‡πÄ‡∏•‡πà‡∏°\n` +
      `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°: ${loan.loanDate.toLocaleDateString("th-TH")}\n` +
      `‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô: ${returnDate.toLocaleDateString("th-TH")}\n` +
      `${lateDays > 0 ? `‚è∞ ‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î ${lateDays} ‡∏ß‡∏±‡∏ô` : "üü¢ ‡∏Ñ‡∏∑‡∏ô‡∏ï‡∏£‡∏á‡πÄ‡∏ß‡∏•‡∏≤"}`
    );
    
    res.json({ message: "‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", loan: updatedLoan });
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡∏∑‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" });
  }
};

// ‚úÖ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠‡∏ó‡∏µ‡πà‡∏¢‡∏∑‡∏°
export const getLoansByUser = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (req as any).user;

    if (!user) {
      res.status(401).json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
      return;
    }

    const loans = await prisma.loan.findMany({
      where: { userId: user.id },
      include: {
        book: {
          select: {
            title: true,
          },
        },
      },
      orderBy: {
        loanDate: "desc",
      },
    });

    const result = loans.map((loan) => ({
      id: loan.id,
      title: loan.book.title,
      quantity: loan.quantity,
      loanDate: loan.loanDate,
      dueDate: loan.dueDate,
      returnDate: loan.returnDate,
      returned: loan.returned,
      lateDays: loan.lateDays,
    }));

    res.json(result);
  } catch (err) {
    console.error(err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠" });
  }
};

// ‚úÖ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (admin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
export const getAllLoans = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (req as any).user;
    if (user.role !== "admin") {
      res.status(403).json({ message: "‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ" });
      return;
    }

    const loans = await prisma.loan.findMany({
      include: {
        user: { select: { username: true } },
        book: { select: { title: true } },
      },
      orderBy: {
        loanDate: "desc",
      },
    });

    const result = loans.map((loan) => ({
      id: loan.id,
      username: loan.user.username,
      title: loan.book.title,
      quantity: loan.quantity,
      loanDate: loan.loanDate,
      dueDate: loan.dueDate,
      returnDate: loan.returnDate,
      returned: loan.returned,
      lateDays: loan.lateDays,
    }));

    res.json(result);
  } catch (err) {
    console.error("‚ùå Error fetching all loans:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
};

// ‚úÖ ‡∏î‡∏π‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏Ñ‡∏∑‡∏ô
export const getActiveLoans = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (req as any).user;
    if (user.role !== "admin") {
      res.status(403).json({ message: "‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ" });
      return;
    }
    const loans = await prisma.loan.findMany({
      where: { returned: false },
      include: {
        user: {
          select:
          {
            username: true,
            titleTH: true,
            firstNameTH: true,
            lastNameTH: true,
            phone: true,
            memberId: true,
          }
        },
        book: {
          select:
          {
            title: true,
          }
        },
      },
      orderBy: {
        loanDate: "desc",
      },
    });

    const result = loans.map((loan) => ({
      id: loan.id,
      memberId: loan.user.memberId,
      username: loan.user.username,
      title: loan.book.title,
      quantity: loan.quantity,
      loanDate: loan.loanDate,
      phone: loan.user.phone,
      fullNameTH: `${loan.user.titleTH}${loan.user.firstNameTH} ${loan.user.lastNameTH}`,
      dueDate: loan.dueDate,
      returnDate: loan.returnDate,
      returned: loan.returned,
      lateDays: loan.lateDays,
    }));

    res.json(result);
  } catch (err) {
    console.error("‚ùå Error fetching active loans:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
};

// ‚úÖ ‡∏î‡∏π‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏≤‡∏á‡∏Ñ‡∏∑‡∏ô
export const getOverdueLoans = async (req: Request, res: Response): Promise<void> => {
  try {
    const user = (req as any).user;

    if (user.role !== "admin") {
      res.status(403).json({ message: "‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ" });
      return;
    }

    const today = new Date();

    const overdueLoans = await prisma.loan.findMany({
      where: {
        returned: false,
        dueDate: {
          lt: today,
        },
      },
      include: {
        user: {
          select: {
            username: true,
            titleTH: true,
            firstNameTH: true,
            lastNameTH: true,
            phone: true,
            memberId: true,
          },
        },
        book: {
          select: {
            title: true,
          },
        },
      },
      orderBy: {
        dueDate: "asc",
      },
    });

    const result = overdueLoans.map((loan) => ({
      id: loan.id,
      memberId: loan.user.memberId,
      username: loan.user.username,
      phone: loan.user.phone,
      fullNameTH: `${loan.user.titleTH}${loan.user.firstNameTH} ${loan.user.lastNameTH}`,
      title: loan.book.title,
      quantity: loan.quantity,
      loanDate: loan.loanDate,
      dueDate: loan.dueDate,
      returnDate: loan.returnDate,
      returned: loan.returned,
      lateDays: differenceInDays(today, loan.dueDate!),
    }));

    res.json(result);
  } catch (err) {
    console.error("‚ùå Error in getOverdueLoans:", err);
    res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡∏¥‡∏ô‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡∏∑‡∏ô" });
  }
};

