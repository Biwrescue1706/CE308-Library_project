// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  memberId         String   @unique //สมาชิก
  username         String   @unique //ผู้ใช้งาน
  password         String
  titleTH          String //คำนำหน้าไทย 
  firstNameTH      String //ชื่อไทย
  lastNameTH       String //นามสกุลไทย
  titleEN          String? //คำนำหน้าอังกฤษ
  firstNameEN      String? //ชื่ออังกฤษ
  lastNameEN       String? //นามสกุลอังกฤษ
  birthDate        DateTime //วันเกิด
  registrationDate DateTime @default(now()) //วันสมัคร
  expirationDate   DateTime //วันหมดอายุบัตร
  role             String // เช่น admin, user 
  phone            String //โทรศัพท์    
  address          Address? //ที่อยู่
  createdAt        DateTime @default(now())
  updateAt         DateTime @updatedAt
  loans            Loan[]
}

model Address {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  village     String
  street      String
  alley       String
  subdistrict String
  district    String
  province    String
  postalCode  String
  createdAt   DateTime @default(now())
  updateAt    DateTime @updatedAt
}

model Book {
  id              String   @id @default(uuid())
  title           String
  author          String
  description     String?
  category        String
  availableCopies Int
  totalCopies     Int
  createdAt       DateTime @default(now())
  updateAt        DateTime @updatedAt
  loans           Loan[]
}

model Loan {
  id         String    @id @default(uuid())
  userId     String
  bookId     String
  loanDate   DateTime  @default(now())
  returnDate DateTime?
  returned   Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  book       Book      @relation(fields: [bookId], references: [id])
}
