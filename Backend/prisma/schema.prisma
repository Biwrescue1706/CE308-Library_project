// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique //อีเมล
  memberId         String   @unique //สมาชิก
  username         String   @unique //ผู้ใช้งาน
  password         String //รหัสผ่าน
  titleTH          String //คำนำหน้าไทย
  firstNameTH      String //ชื่อไทย
  lastNameTH       String //นามสกุลไทย
  titleEN          String? //คำนำหน้าอังกฤษ
  firstNameEN      String? //ชื่ออังกฤษ
  lastNameEN       String? //นามสกุลอังกฤษ
  birthDate        DateTime //วันเกิด
  phone            String //โทรศัพท์ 
  role             String   @default("user") // เช่น admin, user 
  houseNumber      String? //บ้านเลขที่
  villageNo        String? //หมู่
  alley            String? //ซอย
  street           String? //ถนน
  subdistrict      String? //ตำบล
  district         String? // อำเภอ
  province         String? // จังหวัด
  postalCode       String? // รหัสไปรษณีย์  
  registrationDate DateTime @default(now()) //วันสมัคร
  createdAt        DateTime @default(now())
  updateAt         DateTime @updatedAt
  loans            Loan[]
  cartItems        Cart[]
  createdBooks     Book[]   @relation("CreatedBooks")
  updatedBooks     Book[]   @relation("UpdatedBooks")
}

model Book {
  id              String   @id @default(uuid())
  title           String // ชื่อหนังสือ
  author          String // ผู้เขียน
  description     String? // คำอธิบายหนังสือ
  category        String // หมวดหมู่ของหนังสือ
  availableCopies Int // จำนวนสำเนาที่สามารถยืมได้
  totalCopies     Int // จำนวนสำเนาทั้งหมด
  createdById     String // รหัสผู้สร้างหนังสือ
  updatedById     String? // รหัสผู้ที่อัพเดตหนังสือ
  createdAt       DateTime @default(now())
  updateAt        DateTime @updatedAt
  createdBy       User     @relation("CreatedBooks", fields: [createdById], references: [id])
  updatedBy       User?    @relation("UpdatedBooks", fields: [updatedById], references: [id])
  loans           Loan[]
  cartItems       Cart[]
}

model Loan {
  id         String    @id @default(uuid())
  userId     String // รหัสผู้ใช้งาน
  bookId     String // รหัสหนังสือ
  quantity   Int       @default(1) // ✅ จำนวนเล่มที่ยืม
  loanDate   DateTime  @default(now()) // วันที่ยืม
  returnDate DateTime? // วันที่คืน
  returned   Boolean   @default(false) // สถานะการคืนหนังสือ
  createdAt  DateTime  @default(now())
  updateAt   DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  book       Book      @relation(fields: [bookId], references: [id])
}

model Cart {
  id        String   @id @default(uuid())
  userId    String // รหัสผู้ใช้งาน
  bookId    String // รหัสหนังสือ  
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  book      Book     @relation(fields: [bookId], references: [id])
}
